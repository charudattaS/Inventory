ShopBridge Inventory management.

Tables used are as bellow.
1. ItemCategoryDemo.
Main fields.
                   1.Id
                   2.Name
                   3.IsActive
2. ItemDemo
                   1.Id
                   2.ItemCategoryDemoId
                   3.Name
                   4.PurchaseIn
                   5.PurchaseOut
                   6.IsActive
3.ItemCostDetails
                   1.Id
                   2.ItemId
                   3.Cost
                   4.IsActive

Used 3 layers for software development
1.Model.
              Model is an Class library Project
Created four model classes.this model is used in WebApi and Asp.net code as a reference.
               1)Login.
               2)ItemCategory.
               3)Item.
               4)ItemStockTransaction:-
               This clasd is Transaction(Complex object class)
Used Item and ItemCategory models
Where this is main transaction model I have used for this project.

2.User interference.(UI)
                 This is Asp.Net Core Web MVC app. This project handles User Interference UI and routing requests to WebApi
I have also created HttpClient class to communicate with WebApi in which Post, Put and Get calls are fully implemented.

3.WebApi.
                 This is ASP.Net Core WebApi project, This project is layered architecture using
1.SOLID PRINCIPAL.
2.Repository Pattern.
3.Dependency Injection.
                  Layers:
1)WebApi.                        
2)BussinessAccessLayer
3)DataAccessLayer

1."UI" Project communicate with "WebApi Controller" as per Routing requests.
2.WebApi controller uses dependency injection
3.Controller call goes to BussinessAccessLayer class library project in which I have wrote code using all business logic..
4.BussinessAccessLayer call goes to
DataAccessLayer in which I have used repository pattern Created public Interface in which
I have declared methods which is further defined in class  communicating database(PostgreSql).
Dal layer returns data from database to Bal layer , further Bal layer returns data to WebApi Controller and WebApi Controller returns data to UI controller.

4.Added unit Testing project for WebApi.

Project Devlopment Time(ETA):- 
1.UI(Asp.net Core mvc app) 16hrs
2.WebApi(Asp.net Core webapi app) 24hrs
3.Model and DataBase 1hrs
4.Unit Testing 6hrs


Steps to run Project.
1.Go to InventoryProject
2.UI/UI.sln run

3.Go to Inventory
4.Inventory/Inventory.sln run

5.Keep folder structure as it is.
6.use Model to change or update model changes build project and copy and paste Model.dll into ModelDll folder
7. To Run test in Inventory project Test tab and run test.
8.Done